"use strict";(self.webpackChunkmorph_doc=self.webpackChunkmorph_doc||[]).push([[7140],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),u=o,m=d["".concat(p,".").concat(u)]||d[u]||h[u]||a;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4513:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(8063),o=(n(9496),n(9613));const a={title:"How to Run a Morph Node",lang:"en-US"},l=void 0,i={unversionedId:"build-on-morph/developer-resources/how-to-run-a-morph-node",id:"build-on-morph/developer-resources/how-to-run-a-morph-node",title:"How to Run a Morph Node",description:"Run a Morph Node",source:"@site/docs/build-on-morph/developer-resources/2-how-to-run-a-morph-node.md",sourceDirName:"build-on-morph/developer-resources",slug:"/build-on-morph/developer-resources/how-to-run-a-morph-node",permalink:"/docs/build-on-morph/developer-resources/how-to-run-a-morph-node",draft:!1,editUrl:"https://github.com/morph-l2/morph-doc/tree/main/docs/build-on-morph/developer-resources/2-how-to-run-a-morph-node.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"How to Run a Morph Node",lang:"en-US"},sidebar:"DevSidebar",previous:{title:"Contract Address",permalink:"/docs/build-on-morph/developer-resources/contracts"},next:{title:"CrossChainMessenger",permalink:"/docs/build-on-morph/sdk/classes/CrossChainMessenger"}},p={},s=[{value:"Run a Morph Node",id:"run-a-morph-node",level:2},{value:"Hardware requirements",id:"hardware-requirements",level:3},{value:"Build executable binary",id:"build-executable-binary",level:3},{value:"Build Geth",id:"build-geth",level:4},{value:"Build Node",id:"build-node",level:4},{value:"Sync from genesis block",id:"sync-from-genesis-block",level:3},{value:"Config Preparation",id:"config-preparation",level:4},{value:"Script to start the process",id:"script-to-start-the-process",level:4},{value:"Geth",id:"geth",level:5},{value:"Node",id:"node",level:5},{value:"Check sync status",id:"check-sync-status",level:3}],c={toc:s},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"run-a-morph-node"},"Run a Morph Node"),(0,o.kt)("p",null,"This guide describes the approach to starting up a morph node. We create the folder ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.morph")," as our home directory for the following example. "),(0,o.kt)("h3",{id:"hardware-requirements"},"Hardware requirements"),(0,o.kt)("p",null,"Running the morph node requires 2 processes to be started, which are ",(0,o.kt)("inlineCode",{parentName:"p"},"geth")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"node"),".  "),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Geth")," is the Morph execution layer which needs to meet the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ethereum/go-ethereum#hardware-requirements"},"go-ethereum hardware requirements"),", but with less storage, 500GB is enough so far. "),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Node")," is the Morph consensus layer embedded tendermint which needs to meet the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.tendermint.com/v0.34/tendermint-core/running-in-production.html#processor-and-memory"},"tendermint hardware requirements"),". "),(0,o.kt)("p",null,"According to limitations of the current geth implementation, we only support archive mode for launching a Geth.  So the storage size of Geth will constantly increase along with blocks produced. "),(0,o.kt)("h3",{id:"build-executable-binary"},"Build executable binary"),(0,o.kt)("h4",{id:"build-geth"},"Build Geth"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Clone ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/morph-l2/go-ethereum"},"go-ethereum"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\nmkdir -p ~/.morph \ncd ~/.morph\ngit clone https://github.com/morph-l2/go-ethereum.git\n\n")),(0,o.kt)("p",null,"   Currently, we use tag  ",(0,o.kt)("inlineCode",{parentName:"p"},"v0.2.1-beta")," as our beta version geth. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd go-ethereum\ngit checkout v0.2.1-beta\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Build geth")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"make nccc_geth\n")),(0,o.kt)("h4",{id:"build-node"},"Build Node"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Clone ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/morph-l2/node"},"node"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd ~/.morph\ngit clone https://github.com/morph-l2/node.git\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Build node")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd node\ngit checkout v0.2.1-beta\nmake build\n")),(0,o.kt)("h3",{id:"sync-from-genesis-block"},"Sync from genesis block"),(0,o.kt)("h4",{id:"config-preparation"},"Config Preparation"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Download the config files and make data dir")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd ~/.morph\nwget https://raw.githubusercontent.com/morph-l2/config-template/main/sepolia-beta/data.zip\nunzip data.zip\n")),(0,o.kt)("p",null,"  ",(0,o.kt)("inlineCode",{parentName:"p"},"geth-data")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"node-data")," will be produced under the ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.morph")," like the below"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 geth-data\n\u2502\xa0\xa0 \u251c\u2500\u2500 genesis.json\n\u2502\xa0\xa0 \u2514\u2500\u2500 static-nodes.json\n\u2514\u2500\u2500 node-data\n    \u251c\u2500\u2500 config\n    \u2502\xa0\xa0 \u251c\u2500\u2500 config.toml\n    \u2502\xa0\xa0 \u2514\u2500\u2500 genesis.json\n    \u2514\u2500\u2500 data\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Create a shared secret with ",(0,o.kt)("inlineCode",{parentName:"li"},"node"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd ~/.morph\nopenssl rand -hex 32 > jwt-secret.txt\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Write geth genesis state locally")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd ~/.morph\n./go-ethereum/build/bin/geth --verbosity=3 init --datadir=~/.morph/geth-data ~/.morph/geth-data/genesis.json\n")),(0,o.kt)("h4",{id:"script-to-start-the-process"},"Script to start the process"),(0,o.kt)("h5",{id:"geth"},"Geth"),(0,o.kt)("p",null,"This is the script for alpha testnet.  Execute the shell script to start the geth process"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#! /usr/bin/bash\ncd ~/.morph\n\nNETWORK_ID=2710\n\nnohup ./go-ethereum/build/bin/geth \\\n  --datadir=./geth-data \\\n  --verbosity=3 \\\n  --http \\\n  --http.corsdomain="*" \\\n  --http.vhosts="*" \\\n  --http.addr=0.0.0.0 \\\n  --http.port=8545 \\\n  --http.api=web3,debug,eth,txpool,net,morph,engine \\\n  --networkid=$NETWORK_ID \\\n  --authrpc.addr="0.0.0.0" \\\n  --authrpc.port="8551" \\\n  --authrpc.vhosts="*" \\\n  --authrpc.jwtsecret=./jwt-secret.txt \\\n  --miner.gasprice="100000000" \\\n  --gcmode=archive > geth.log 2>&1 &\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tail -f geth.log")," to check if the Geth is running properly, or you can also exeucte the below ",(0,o.kt)("inlineCode",{parentName:"p"},"curl")," command to check if you are connected to the peer. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'curl -X POST -H \'Content-Type: application/json\' --data \'{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":74}\' localhost:8545\n{"jsonrpc":"2.0","id":74,"result":"0x6"}\n')),(0,o.kt)("h5",{id:"node"},"Node"),(0,o.kt)("p",null,"This is the script to start the node process"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'#! /usr/bin/bash\ncd ~/.morph\n\nNODE_DATA_DIR="./node-data"\nexport MORPH_NODE_L2_ENGINE_AUTH="./jwt-secret.txt"\nexport MORPH_NODE_L2_ETH_RPC="http://127.0.0.1:8545"\nexport MORPH_NODE_L2_ENGINE_RPC="http://127.0.0.1:8551"\n\nnohup ./node/build/bin/morphnode --home $NODE_DATA_DIR > node.log 2>&1 &\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tail -f node.log")," to check if the node is running properly, the expected logs show like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"I[2023-08-23|18:33:39.599] received complete proposal block             module=consensus height=32 hash=E760BC6642D0BAC98FED9E4AE35544CD701E0C134E51F2A4CF088DA1E156638D\nI[2023-08-23|18:33:39.600] finalizing commit of block                   module=consensus height=32 hash=E760BC6642D0BAC98FED9E4AE35544CD701E0C134E51F2A4CF088DA1E156638D root= num_txs=0\nI[2023-08-23|18:33:39.606] DeliverBlock request                         module=executor txslength=0 l2Configlength=420 zkConfiglength=58 validatorlength=7 blsSignatureslength=7\nI[2023-08-23|18:33:39.606] executed block                               module=state height=32 num_valid_txs=0 num_invalid_txs=0\nI[2023-08-23|18:33:39.610] committed state                              module=state height=32 num_txs=0 app_hash=\nI[2023-08-23|18:33:39.614] indexed block                                module=txindex height=32\n")),(0,o.kt)("p",null,"And you can also execute the command curl to check your node connection status."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"curl http://localhost:26657/net_info")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "jsonrpc": "2.0",\n  "id": -1,\n  "result": {\n    "listening": true,\n    "listeners": [\n      "Listener(@)"\n    ],\n    "n_peers": "6",\n    "peers": [\n      {\n        "node_info": {\n          "protocol_version": {\n            "p2p": "8",\n            "block": "11",\n            "app": "0"\n          },\n          "id": "9247d5aac854b009b29c80f177f782c6736f0b03",\n          "listen_addr": "tcp://0.0.0.0:26656",\n          "network": "chain-morph",\n          "version": "0.37.0-alpha.1",\n          "channels": "4020212223386061",\n          "moniker": "eu-sentry1",\n          "other": {\n            "tx_index": "on",\n            "rpc_address": "tcp://0.0.0.0:26657"\n          }\n        },\n    ......      \n\n')),(0,o.kt)("h3",{id:"check-sync-status"},"Check sync status"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'curl http://localhost:26657/status to check the sync status of the node\n{\n  "jsonrpc": "2.0",\n  "id": -1,\n  "result": {\n    "node_info": {\n      "protocol_version": {\n        "p2p": "8",\n        "block": "11",\n        "app": "0"\n      },\n      "id": "a2a6ff1fac52f5f899c89f9fc3958e133b325f06",\n      "listen_addr": "tcp://0.0.0.0:26656",\n      "network": "chain-morph",\n      "version": "0.37.0-alpha.1",\n      "channels": "4020212223386061",\n      "moniker": "my-morph-node",\n      "other": {\n        "tx_index": "on",\n        "rpc_address": "tcp://0.0.0.0:26657"\n      }\n    },\n    "sync_info": {\n      "latest_block_hash": "ACE931319E480088EC6578B004B28B25F04E3E02B72FD0EABCFD8AED4146511B",\n      "latest_app_hash": "",\n      "latest_block_height": "13229",\n      "latest_block_time": "2024-01-23T20:11:14.042157891Z",\n      "earliest_block_hash": "DACE0A9492B121C810650B673A4818BBA31AF2C2D019DC07DEC643D184752B5A",\n      "earliest_app_hash": "",\n      "earliest_block_height": "1",\n      "earliest_block_time": "2024-01-23T02:00:00Z",\n      "catching_up": true\n    },\n    "validator_info": {\n      "address": "F2C1FDF9409AA9A2FCAF2D7804C88834EC8B08E2",\n      "pub_key": {\n        "type": "tendermint/PubKeyEd25519",\n        "value": "WJWaHG7hh7+CGPyS1YeOEAZ0Rj4+0ujfr0GjOOGey14="\n      },\n      "voting_power": "0"\n    }\n  }\n}\n')),(0,o.kt)("p",null,'The returned "catching_up" indicates  whether the node is in sync or not. ',(0,o.kt)("em",{parentName:"p"},"True")," means it is in sync. "),(0,o.kt)("p",null,"Meanwhile, the returned  latest_block_height indicates the latest block height this node synced."))}h.isMDXComponent=!0}}]);
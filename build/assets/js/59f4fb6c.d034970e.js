"use strict";(self.webpackChunkmorph_doc=self.webpackChunkmorph_doc||[]).push([[3616],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},367:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(8063),o=(n(9496),n(9613));const i={title:"Transactions Life Cycle",lang:"en-US",keywords:["morph","ethereum","rollup","layer2","validity proof","optimstic zk-rollup"],description:"Upgrade your blockchain experience with Morph - the secure decentralized, cost0efficient, and high-performing optimstic zk-rollup solution. Try it now!"},a=void 0,s={unversionedId:"how-morph-works/general-protocol-design/transactions-life-cycle",id:"how-morph-works/general-protocol-design/transactions-life-cycle",title:"Transactions Life Cycle",description:"Upgrade your blockchain experience with Morph - the secure decentralized, cost0efficient, and high-performing optimstic zk-rollup solution. Try it now!",source:"@site/docs/how-morph-works/general-protocol-design/4-transactions-life-cycle.md",sourceDirName:"how-morph-works/general-protocol-design",slug:"/how-morph-works/general-protocol-design/transactions-life-cycle",permalink:"/docs/how-morph-works/general-protocol-design/transactions-life-cycle",draft:!1,editUrl:"https://github.com/morph-l2/morph-doc/tree/main/docs/how-morph-works/general-protocol-design/4-transactions-life-cycle.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Transactions Life Cycle",lang:"en-US",keywords:["morph","ethereum","rollup","layer2","validity proof","optimstic zk-rollup"],description:"Upgrade your blockchain experience with Morph - the secure decentralized, cost0efficient, and high-performing optimstic zk-rollup solution. Try it now!"},sidebar:"HowSidebar",previous:{title:"Communication between Morph and Ethereum",permalink:"/docs/how-morph-works/general-protocol-design/communicate-between-morph-and-ethereum"},next:{title:"Difference between Morph and Ethereum",permalink:"/docs/how-morph-works/general-protocol-design/difference-between-ethereum-and-morph"}},c={},l=[{value:"How does a L2 transaction processed on Morph",id:"how-does-a-l2-transaction-processed-on-morph",level:2},{value:"Morph Transaction Status",id:"morph-transaction-status",level:2},{value:"Processing\u200b",id:"processing",level:3},{value:"Confirmed\u200b",id:"confirmed",level:3},{value:"Finalized\u200b",id:"finalized",level:3}],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"how-does-a-l2-transaction-processed-on-morph"},"How does a L2 transaction processed on Morph"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Submit Transaction")),(0,o.kt)("p",null,"Users-initiated transactions are first sent to the mempool, where they await selection and processing by a sequencer."),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Transaction Consensus")),(0,o.kt)("p",null,"Within the sequencer network, transactions undergo a consensus process. A selected sequencer proposes a block containing the transaction. Other sequencers then validate this block, effectively verifying the transaction's legitimacy."),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Transaction Execution")),(0,o.kt)("p",null,"The chosen sequencer orders transactions retrieved from the mempool, executes them sequentially, and updates the local L2 state accordingly."),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Transaction Batching")),(0,o.kt)("p",null,"The sequencer compiles transactions into blocks and subsequently groups these blocks into batches according to specific rules."),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Batch Sequencing")),(0,o.kt)("p",null,"These batches are ultimately submitted to the Layer 1 (L1) contract for both verification and to ensure data availability."),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"Batch Verification ")),(0,o.kt)("p",null,"After successfully facing a challenge period and once validated by sequencers, the batches, along with the transactions they contain, are marked as finalized, solidifying their status within the L1 and L2 state."),(0,o.kt)("h2",{id:"morph-transaction-status"},"Morph Transaction Status"),(0,o.kt)("h3",{id:"processing"},"Processing\u200b"),(0,o.kt)("p",null,"Once submitted, a transaction enters the consensus phase managed by sequencers and is placed into a block pre-execution."),(0,o.kt)("h3",{id:"confirmed"},"Confirmed\u200b"),(0,o.kt)("p",null,"Post-execution by the Sequencer, the transaction\u2019s updated state is local to L2. It is then batched and sent to L1, where it must undergo a challenge period before finalization."),(0,o.kt)("h3",{id:"finalized"},"Finalized\u200b"),(0,o.kt)("p",null,"A transaction is considered finalized after it survives the challenge period or is verified by a Zero-Knowledge Proof (ZK-Proof). Only then is it officially integrated into the final L1 and L2 state."))}u.isMDXComponent=!0}}]);
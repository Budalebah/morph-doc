"use strict";(self.webpackChunkmorph_doc=self.webpackChunkmorph_doc||[]).push([[7472],{9613:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(n),h=o,m=p["".concat(c,".").concat(h)]||p[h]||u[h]||a;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(8063),o=(n(9496),n(9613));const a={title:"Difference between Morph and Ethereum",lang:"en-US",keywords:["morph","ethereum","rollup","layer2","validity proof","optimstic zk-rollup"],description:"Upgrade your blockchain experience with Morph - the secure decentralized, cost0efficient, and high-performing optimstic zk-rollup solution. Try it now!"},i=void 0,l={unversionedId:"how-morph-works/general-protocol-design/difference-between-ethereum-and-morph",id:"how-morph-works/general-protocol-design/difference-between-ethereum-and-morph",title:"Difference between Morph and Ethereum",description:"Upgrade your blockchain experience with Morph - the secure decentralized, cost0efficient, and high-performing optimstic zk-rollup solution. Try it now!",source:"@site/docs/how-morph-works/general-protocol-design/5-difference-between-ethereum-and-morph.md",sourceDirName:"how-morph-works/general-protocol-design",slug:"/how-morph-works/general-protocol-design/difference-between-ethereum-and-morph",permalink:"/docs/how-morph-works/general-protocol-design/difference-between-ethereum-and-morph",draft:!1,editUrl:"https://github.com/morph-l2/morph-doc/tree/main/docs/how-morph-works/general-protocol-design/5-difference-between-ethereum-and-morph.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Difference between Morph and Ethereum",lang:"en-US",keywords:["morph","ethereum","rollup","layer2","validity proof","optimstic zk-rollup"],description:"Upgrade your blockchain experience with Morph - the secure decentralized, cost0efficient, and high-performing optimstic zk-rollup solution. Try it now!"},sidebar:"HowSidebar",previous:{title:"Transactions Life Cycle",permalink:"/docs/how-morph-works/general-protocol-design/transactions-life-cycle"}},c={},d=[{value:"EVM Opcodes",id:"evm-opcodes",level:2},{value:"State Account",id:"state-account",level:2},{value:"Additional Fields",id:"additional-fields",level:3},{value:"CodeHash",id:"codehash",level:3},{value:"CodeSize",id:"codesize",level:3},{value:"Block Time",id:"block-time",level:2},{value:"Future EIPs",id:"future-eips",level:2},{value:"Transaction Fees",id:"transaction-fees",level:2}],s={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"There are a number of technical details that differ between Ethereum mainnet's EVM and Morph's modified design for a zkEVM. Below you can see those differences as they exist now."),(0,o.kt)("p",null,"For open-source contributors and infrastructure builders, please contact our team for additional support."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"For the average Solidity developer, these details won't affect your development experience.")),(0,o.kt)("h2",{id:"evm-opcodes"},"EVM Opcodes"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Opcode"),(0,o.kt)("th",{parentName:"tr",align:null},"Solidity equivalent"),(0,o.kt)("th",{parentName:"tr",align:null},"Ethereum Behavior"),(0,o.kt)("th",{parentName:"tr",align:null},"Morph Behavior"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"COINBASE"),(0,o.kt)("td",{parentName:"tr",align:null},"block.coinbase"),(0,o.kt)("td",{parentName:"tr",align:null},"In Ethereum Clique, the eth address of the signer."),(0,o.kt)("td",{parentName:"tr",align:null},"Returns the pre-deployed fee vault contract address.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"DIFFICULTY/PREVRANDAO"),(0,o.kt)("td",{parentName:"tr",align:null},"block.difficulty"),(0,o.kt)("td",{parentName:"tr",align:null},"After PoS, the previous block\u2019s randao value."),(0,o.kt)("td",{parentName:"tr",align:null},"Returns 0.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"BLOCKHASH"),(0,o.kt)("td",{parentName:"tr",align:null},"block.blockhash"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Input"),": blockNumber from top of the stack, and the valid range is ","[NUMBER-256, NUMBER-1]",". ",(0,o.kt)("strong",{parentName:"td"},"Output"),": hash of the given block number, or 0 if the block number is not in the valid range."),(0,o.kt)("td",{parentName:"tr",align:null},"returns keccak(chain_id")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"SELFDESTRUCT"),(0,o.kt)("td",{parentName:"tr",align:null},"selfdestruct"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://eips.ethereum.org/EIPS/eip-4758"},"Plans to deprecate and substitute with SENDALL")),(0,o.kt)("td",{parentName:"tr",align:null},"Disabled in the sequencer. Runtime error, same behavior as the INVALID opcode. ",(0,o.kt)("em",{parentName:"td"},"Will change to adopt Ethereum\u2019s solution in the future."))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"PUSH0"),(0,o.kt)("td",{parentName:"tr",align:null},"/"),(0,o.kt)("td",{parentName:"tr",align:null},"Part of EVM as of Shanghai hard fork"),(0,o.kt)("td",{parentName:"tr",align:null},"Runtime Error, will act as an INVALID opcode. Will be supported")))),(0,o.kt)("h2",{id:"state-account"},"State Account"),(0,o.kt)("h3",{id:"additional-fields"},"Additional Fields"),(0,o.kt)("p",null,"We added two fields in the current StateAccount object: PoseidonCodehash and CodeSize."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"type StateAccount struct {\n    Nonce    uint64\n    Balance  *big.Int\n    Root     common.Hash // merkle root of the storage trie\n    KeccakCodeHash []byte // still the Keccak codehash\n    // added fields\n    PoseidonCodeHash []byte // the Poseidon codehash\n    CodeSize uint64\n}\n")),(0,o.kt)("h3",{id:"codehash"},"CodeHash"),(0,o.kt)("p",null,"Related to this, we maintain two types of codehash for each contract bytecode: Keccak hash and Poseidon hash.\nKeccakCodeHash is kept to maintain compatibility for EXTCODEHASH. PoseidonCodeHash is used for verifying correctness of bytecodes loaded in the zkEVM, where Poseidon hashing is far more efficient."),(0,o.kt)("h3",{id:"codesize"},"CodeSize"),(0,o.kt)("p",null,"When verifying EXTCODESIZE, it is expensive to load the whole contract data into the zkEVM. Instead, we store the contract size in storage during contract creation, eliminating the need to load the code \u2014 a storage proof is sufficient to verify this opcode."),(0,o.kt)("h2",{id:"block-time"},"Block Time"),(0,o.kt)("admonition",{title:"Block Time Subject to Change",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Currently blocks are produced every second and empty block if no transctions for 5 seconds\nHowever, that value may change in the future.")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TIMESTAMP")," will return the timestamp of the block. It will update every second."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"BLOCKNUMBER")," will return an actual block number. It will update every second. The one-to-one mapping between blocks and transactions will no longer apply.")),(0,o.kt)("h2",{id:"future-eips"},"Future EIPs"),(0,o.kt)("p",null,"We keep a close eye on all emerging Ethereum Improvement Proposals (EIPs) and adopt them when they are suitable. If you are interested in more specifics, feel free to reach out on our community forum or on the Morph Discord."),(0,o.kt)("p",null,"EVM Target version\nTo ensure no unexpected behaviour happens in your contracts, we recommend using london as target version when compiling your smart contracts.\nYou can read in more details on Shanghai hard fork differences from London on the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ethereum/execution-specs/tree/master/network-upgrades/mainnet-upgrades/shanghai.md"},"Ethereum Execution spec")," and how the new PUSH0 instruction ",(0,o.kt)("a",{parentName:"p",href:"https://blog.soliditylang.org/2023/05/10/solidity-0.8.20-release-announcement/"},"impacts the Solidity compiler"),"."),(0,o.kt)("h2",{id:"transaction-fees"},(0,o.kt)("a",{parentName:"h2",href:"/docs/how-morph-works/general-protocol-design/transaction-fees-on-morph"},"Transaction Fees")))}u.isMDXComponent=!0}}]);
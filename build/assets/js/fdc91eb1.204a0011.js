"use strict";(self.webpackChunkmorph_doc=self.webpackChunkmorph_doc||[]).push([[7472],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=d(n),u=o,h=s["".concat(p,".").concat(u)]||s[u]||m[u]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(8063),o=(n(9496),n(9613));const a={title:"Difference between Morph and Ethereum",lang:"en-US",keywords:["morph","ethereum","rollup","layer2","validity proof","optimstic zk-rollup"],description:"Upgrade your blockchain experience with Morph - the secure decentralized, cost0efficient, and high-performing optimstic zk-rollup solution. Try it now!"},i=void 0,l={unversionedId:"how-morph-works/general-protocol-design/difference-between-ethereum-and-morph",id:"how-morph-works/general-protocol-design/difference-between-ethereum-and-morph",title:"Difference between Morph and Ethereum",description:"Upgrade your blockchain experience with Morph - the secure decentralized, cost0efficient, and high-performing optimstic zk-rollup solution. Try it now!",source:"@site/docs/how-morph-works/general-protocol-design/5-difference-between-ethereum-and-morph.md",sourceDirName:"how-morph-works/general-protocol-design",slug:"/how-morph-works/general-protocol-design/difference-between-ethereum-and-morph",permalink:"/docs/how-morph-works/general-protocol-design/difference-between-ethereum-and-morph",draft:!1,editUrl:"https://github.com/morph-l2/morph-doc/tree/main/docs/how-morph-works/general-protocol-design/5-difference-between-ethereum-and-morph.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Difference between Morph and Ethereum",lang:"en-US",keywords:["morph","ethereum","rollup","layer2","validity proof","optimstic zk-rollup"],description:"Upgrade your blockchain experience with Morph - the secure decentralized, cost0efficient, and high-performing optimstic zk-rollup solution. Try it now!"},sidebar:"HowSidebar",previous:{title:"Transactions Life Cycle",permalink:"/docs/how-morph-works/general-protocol-design/transactions-life-cycle"}},p={},d=[{value:"EVM Opcodes",id:"evm-opcodes",level:2},{value:"EVM Precompiles",id:"evm-precompiles",level:2},{value:"State Account",id:"state-account",level:2},{value:"<strong>Additional Fields</strong>",id:"additional-fields",level:3},{value:"<strong>CodeHash</strong>",id:"codehash",level:3},{value:"CodeSize",id:"codesize",level:3},{value:"Block Time",id:"block-time",level:2},{value:"Future EIPs",id:"future-eips",level:2},{value:"Transaction Fees",id:"transaction-fees",level:2}],c={toc:d},s="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"There are several technical differences between Ethereum\u2019s EVM and Morph's optimistic zkEVM."),(0,o.kt)("p",null,"We\u2019ve compiled a list to help you understand these distinctions better."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"For most Solidity developers, these technical details won't significantly impact your development experience.")),(0,o.kt)("h2",{id:"evm-opcodes"},"EVM Opcodes"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Opcode"),(0,o.kt)("th",{parentName:"tr",align:null},"Solidity equivalent"),(0,o.kt)("th",{parentName:"tr",align:null},"Morph Behavior"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"BLOCKHASH")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"block.blockhash")),(0,o.kt)("td",{parentName:"tr",align:null},"Returns ",(0,o.kt)("inlineCode",{parentName:"td"},"keccak(chain_id \\|\\| block_number)")," for the last 256 blocks.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"COINBASE")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"block.coinbase")),(0,o.kt)("td",{parentName:"tr",align:null},"Returns the pre-deployed fee vault contract address. See ",(0,o.kt)("a",{parentName:"td",href:"/docs/build-on-morph/developer-resources/contracts"},"Contracts"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"DIFFICULTY")," / ",(0,o.kt)("inlineCode",{parentName:"td"},"PREVRANDAO")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"block.difficulty")),(0,o.kt)("td",{parentName:"tr",align:null},"Returns 0.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"BASEFEE")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"block.basefee")),(0,o.kt)("td",{parentName:"tr",align:null},"Disabled. If the opcode is encountered, the transaction will be reverted.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"SELFDESTRUCT")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"selfdestruct")),(0,o.kt)("td",{parentName:"tr",align:null},"Disabled. If the opcode is encountered, the transaction will be reverted.")))),(0,o.kt)("h2",{id:"evm-precompiles"},"EVM Precompiles"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SHA2-256")," (address ",(0,o.kt)("inlineCode",{parentName:"p"},"0x2"),"), ",(0,o.kt)("inlineCode",{parentName:"p"},"RIPEMD-160")," (address ",(0,o.kt)("inlineCode",{parentName:"p"},"0x3"),"), and ",(0,o.kt)("inlineCode",{parentName:"p"},"blake2f")," (address ",(0,o.kt)("inlineCode",{parentName:"p"},"0x9"),") precompiles are currently not supported. Calls to these contracts will be reverted. We plan to enable these three precompiles in a future hard fork."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"modexp")," precompile is supported, but only for inputs up to 32 bytes (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"u256"),")."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ecPairing")," precompile is supported but limits the number of points(sets, pairs) to 4, instead of 6."),(0,o.kt)("p",null,"Other EVM precompiles like ",(0,o.kt)("inlineCode",{parentName:"p"},"ecRecover"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"identity"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ecAdd"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"ecMul")," are fully supported."),(0,o.kt)("h2",{id:"state-account"},"State Account"),(0,o.kt)("h3",{id:"additional-fields"},(0,o.kt)("strong",{parentName:"h3"},"Additional Fields")),(0,o.kt)("p",null,"We have introduced two additional fields in the ",(0,o.kt)("inlineCode",{parentName:"p"},"StateAccount")," object: ",(0,o.kt)("inlineCode",{parentName:"p"},"PoseidonCodehash")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"CodeSize"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StateAccount struct {\n    Nonce    uint64\n    Balance  *big.Int\n    Root     common.Hash // merkle root of the storage trie\n    KeccakCodeHash []byte // still the Keccak codehash\n    // added fields\n    PoseidonCodeHash []byte // the Poseidon codehash\n    CodeSize uint64\n}\n")),(0,o.kt)("h3",{id:"codehash"},(0,o.kt)("strong",{parentName:"h3"},"CodeHash")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There are two types of codehash for each contract bytecode: ",(0,o.kt)("inlineCode",{parentName:"p"},"KeccakCodeHash"),"and ",(0,o.kt)("inlineCode",{parentName:"p"},"PoseidonCodeHash"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"KeccakCodeHash")," is kept to maintain compatibility for EXTCODEHASH. ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"PoseidonCodeHash")," is used for verifying the correctness of bytecodes loaded in the zkEVM, where Poseidon hashing is far more efficient."))),(0,o.kt)("h3",{id:"codesize"},"CodeSize"),(0,o.kt)("p",null,"When verifying ",(0,o.kt)("inlineCode",{parentName:"p"},"EXTCODESIZE"),", loading the entire contract data into the zkEVM is costly. Instead, we store the contract size in storage at contract creation. This approach avoids the need to load the code, as storage proof is sufficient to verify this opcode."),(0,o.kt)("h2",{id:"block-time"},"Block Time"),(0,o.kt)("admonition",{title:"Block Time Subject to Change",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Blocks are produced every second, with an empty block generated if there are no transactions for 5 seconds. However, this frequency may change in the future.")),(0,o.kt)("p",null,"To compare, Ethereum has a block time of ~12 seconds."),(0,o.kt)("p",null,"Reasons for Faster Block Time in Morph\nUser Experience: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A faster, consistent block time provides quicker feedback, enhancing the user experience.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Optimization: As we refine the zkEVM circuits in our testnets, we can achieve higher throughput than Ethereum, even with a smaller gas limit per block or batch."))),(0,o.kt)("p",null,"Notice:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TIMESTAMP")," will return the timestamp of the block. It will update every second."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"BLOCKNUMBER")," will return an actual block number. It will update every second. The one-to-one mapping between blocks and transactions will no longer apply.")),(0,o.kt)("h2",{id:"future-eips"},"Future EIPs"),(0,o.kt)("p",null,"Morph closely monitors emerging Ethereum Improvement Proposals (EIPs) and adopts them when suitable. For more specifics, join our community forum or Discord for discussions."),(0,o.kt)("h2",{id:"transaction-fees"},(0,o.kt)("a",{parentName:"h2",href:"/docs/build-on-morph/build-on-morph/understand-transaction-cost-on-morph"},"Transaction Fees")))}m.isMDXComponent=!0}}]);